#! Generated by VisualDCT v2.5
#! DBDSTART
#! DBD("/dls_sw/epics/R3.14.8.2/base/dbd/base.dbd")
#! DBD("/dls_sw/prod/R3.14.8.2/support/streamDevice/2-3dls6/dbd/stream.dbd")
#! DBDEND

# This template supports a single sensor channel, of which the unit has up to 2.
#
# List of macros
# --------------
# device	The device name.
# record	the record name, T1 or T2
#
# %gdatag,template,simplePv,$(gda_name).$(record),$(gda_desc)
# # The readback value of the units the unit is reporting in.
record(stringin, "$(device):STS:$(record):UNITS") {
  field(DESC, "Temp. units.")
  field(PINI, "YES")
  field(DTYP, "stream")
  field(INP, "@CryoconM32.protocol getTempUnits($(sensor)) $(port)")
}

# % archiver 10 Monitor
# %gdatag,pv,ro,$(gda_name).$(record),RECORD,Sensor temperature
# # The readback value of the temperature converted (by the unit).
record(ai, "$(device):STS:$(record)") {
  field(DESC, "Sensor Temperature")
  field(DTYP, "stream")
  field(INP, "@CryoconM32.protocol getTemp($(sensor)) $(port)")
  field(EGU, "$(egu)")
  field(SCAN, "$(scan) second")
  field(PINI, "YES")
  field(ADEL, "$(adel)")
  field(PREC, "3")
  field(HIHI, "$(hihi)")
  field(HIGH, "$(high)")
  field(LOW, "$(low)")
  field(LOLO, "$(lolo)")
  field(HHSV, "MAJOR")
  field(LLSV, "MINOR")
  field(HSV, "MINOR")
  field(LSV, "MAJOR")
}

# # The readback value of the raw sensor reading. Usually in Ohms but depends on sensor type.
record(ai, "$(tctrlr):STS:$(sensor):RAW") {
  field(DESC, "Raw Sensor Reading")
  field(DTYP, "stream")
  field(INP, "@CryoconM32.protocol getSensorraw($(sensor)) $(port)")
#  field(EGU, "Ohms")
  field(SCAN, "$(scan) second")
  field(PINI, "YES")
  field(PREC, "3")
}


# # The readback value of the statistical minimum since power on or last stats reset.
record(ai, "$(device):STS:$(record):MIN") {
  field(DESC, "Minimum Sensor Temp.")
  field(DTYP, "stream")
  field(INP, "@CryoconM32.protocol getTempMin($(sensor)) $(port)")
  field(EGU, "$(egu)")
  field(SCAN, "5 second")
  field(PINI, "YES")
  field(ADEL, "$(adel)")
  field(PREC, "3")
}

# # The readback value of the statistical maximum since power on or last stats reset.
record(ai, "$(device):STS:$(record):MAX") {
  field(DESC, "Maximum Sensor Temp.")
  field(DTYP, "stream")
  field(INP, "@CryoconM32.protocol getTempMax($(sensor)) $(port)")
  field(EGU, "$(egu)")
  field(SCAN, "5 second")
  field(PINI, "YES")
  field(PREC, "3")
}

# # The readback value of the statistical variance since power on or last stats reset.
record(ai, "$(device):STS:$(record):VARIANCE") {
  field(DESC, "Variance in Sensor Temp.")
  field(DTYP, "stream")
  field(INP, "@CryoconM32.protocol getTempVariance($(sensor)) $(port)")
  field(EGU, "$(egu)")
  field(PINI, "YES")
  field(PREC, "3")
}

# # The readback value of the temperature slope for the best fit for a straight line since power on or last stats reset.
record(ai, "$(device):STS:$(record):SLOPE") {
  field(DESC, "Slope of stats line fit.")
  field(DTYP, "stream")
  field(INP, "@CryoconM32.protocol getTempSlope($(sensor)) $(port)")
  field(EGU, "$(egu)")
  field(SCAN, "5 second")
  field(PINI, "YES")
  field(PREC, "3")
}

# # The readback value of the temperature offset for the best fit for a straight line since power on or last stats reset.
record(ai, "$(device):STS:$(record):OFFSET") {
  field(DESC, "Offset of stats line fit.")
  field(DTYP, "stream")
  field(INP, "@CryoconM32.protocol getTempOffset($(sensor)) $(port)")
  field(EGU, "$(egu)")
  field(SCAN, "5 second")
  field(PINI, "YES")
  field(PREC, "3")
}

#! Further lines contain data used by VisualDCT
#! View(0,0,1.0)
#! Record("$(device):STS:$(record):UNITS",480,48,0,1,"$(device):STS:$(record):UNITS")
#! Record("$(device):STS:$(record)",220,21,0,0,"$(device):STS:$(record)")
#! Record("$(tctrlr):STS:$(sensor):RAW",20,20,0,0,"$(tctrlr):STS:$(sensor):RAW")
#! Record("$(device):STS:$(record):MIN",480,232,0,1,"$(device):STS:$(record):MIN")
#! Record("$(device):STS:$(record):MAX",480,426,0,1,"$(device):STS:$(record):MAX")
#! Record("$(device):STS:$(record):VARIANCE",720,260,0,1,"$(device):STS:$(record):VARIANCE")
#! Record("$(device):STS:$(record):SLOPE",720,446,0,1,"$(device):STS:$(record):SLOPE")
#! Record("$(device):STS:$(record):OFFSET",720,646,0,1,"$(device):STS:$(record):OFFSET")
